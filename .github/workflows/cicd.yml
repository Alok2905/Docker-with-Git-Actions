name: CI/CD for Dockerized Flask App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  dockerbuild:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Build Docker Image
      - name: Build Docker Image
        run: docker build --file Dockerfile --tag workflow-test:$(date +%s) .

  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up the Python environment
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run the test cases
      - name: Run Test Cases
        run: pytest

  # Job 2: Build and Publish Docker Image
  build-and-publish:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to Docker Hub
      - name: Log In to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build and Push Docker Image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .                     # Specify the build context
          push: true                     # Push the image to Docker Hub
          file: Dockerfile               # Explicitly specify the Dockerfile
          tags: ${{ secrets.DOCKER_USERNAME }}/flasktest-app:latest

      # Step 5: Log Image Digest
      - name: Log Image Digest
        run: echo  ${{ steps.build-and-publish.outputs.digest }}
